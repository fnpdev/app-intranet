const express = require('express');
const router = express.Router();

// Servi√ßos
const { 
  getUserVariablesEffective, 
  upsertUserVariable, 
  deleteUserVariable 
} = require('../services/userVariablesService');

const { getVariable } = require('../services/globalVariablesService'); // para validar op√ß√µes v√°lidas

// üîê Fun√ß√£o para pegar o username do token JWT (ou do body em ambiente de teste)
function getUsernameFromToken(req) {
  return req.user?.username || req.body.username || 'anonimo';
}

// ================================================
//  GET /api/user-vars
//  Retorna as vari√°veis do usu√°rio (com fallback no default global)
// ================================================
router.get('/', async (req, res) => {
  try {
    const username = getUsernameFromToken(req);
    const vars = await getUserVariablesEffective(username);
    res.json({ success: true, data: vars });
  } catch (err) {
    console.error('Erro ao listar vari√°veis do usu√°rio:', err);
    res.status(500).json({ success: false, error: 'Erro ao listar vari√°veis' });
  }
});

// ================================================
//  POST /api/user-vars
//  Cria ou atualiza vari√°vel do usu√°rio
// ================================================
router.post('/', async (req, res) => {
  try {
    const username = getUsernameFromToken(req);
    const { key, value, description } = req.body;

    // ‚úÖ 1. Busca as op√ß√µes v√°lidas dessa vari√°vel global
    const globalVar = await getVariable(key);

    // ‚úÖ 2. Valida se o valor enviado est√° entre as op√ß√µes permitidas
    const isValid = globalVar?.options?.some(opt => opt.value === value);

    if (!isValid) {
      return res.status(400).json({ success: false, error: 'Valor n√£o permitido para essa vari√°vel' });
    }

    // ‚úÖ 3. Faz o upsert (insert/update)
    const result = await upsertUserVariable({ username, key, value, description });

    // ‚úÖ 4. Retorna a vari√°vel atualizada
    res.json({ success: true, data: result });

  } catch (err) {
    console.error('Erro ao salvar vari√°vel do usu√°rio:', err);
    res.status(500).json({ success: false, error: 'Erro ao salvar vari√°vel' });
  }
});

// ================================================
//  DELETE /api/user-vars/:key
//  Remove uma vari√°vel do usu√°rio
// ================================================
router.delete('/:key', async (req, res) => {
  try {
    const username = getUsernameFromToken(req);
    const key = req.params.key;
    await deleteUserVariable(username, key);
    res.json({ success: true });
  } catch (err) {
    console.error('Erro ao remover vari√°vel do usu√°rio:', err);
    res.status(500).json({ success: false, error: 'Erro ao remover vari√°vel' });
  }
});

module.exports = router;
